EASInspector

This is an inspector which can be used with Fiddler.  

To compile:
	Install Fiddler 2.4.4.5 or later.

	Check the Post-event command line settings on the Build Events tab of the project's 
	properties to be sure that the paths map to the Inspector folder of fiddler.

	Run Visual Studio with Admin privlidges. This is needed for the copying of the
	application DDL to Fiddler's Inspector folder.

	Check and set the reference to Fiddler to match the path to the Fiddler.exe 
	installed on your system.

When this is run you should see an "EAS XML" tab listed in Fiddler.  When ActiveSync content is 
being viewed you should see the decoded content in the inspector.

 
Most of the code comes from the Exchange Server Interoperability Guidance samples for Activesync, in particular:

	Implementing an Exchange ActiveSync client: the transport mechanism
	http://msdn.microsoft.com/en-us/library/exchange/hh361570(v=exchg.140).aspx

Details on the ActiveSync protocol can be found here:

	Exchange Server Protocol Documents
	http://msdn.microsoft.com/en-us/library/cc425499(v=exchg.80).aspx 

Here is information on licensing:

	Technology Licensing Programs
	http://www.microsoft.com/about/legal/en/us/IntellectualProperty/IPLicensing/Programs/Default.aspx

	Exchange ActiveSync Protocol
	http://www.microsoft.com/about/legal/en/us/IntellectualProperty/IPLicensing/Programs/ExchangeActiveSyncProtocol.aspx

	Microsoft Expands Exchange ActiveSync Licensing Program
	http://www.microsoft.com/presspass/press/2008/dec08/12-18easlicencingpr.mspx
 
This article covers basic information on ActiveSync:

	New to Exchange ActiveSync Development?
 	http://blogs.msdn.com/b/webdav_101/archive/2011/09/28/new-to-exchange-activesync-development.aspx 

 
--------------------
NOTE:

This code is not supported by anyone and exists purely for educational purposes.  If you are building an ActiveSync 
application which is going to be commercialized then you really need to look into licensing.

--------------------
History:
--------------------

7/5/2013
Got code to work. 
Initial check-in.

1.0 Release

7/11/2013
The content type header is used to determine if EAS decoding should be done.  I had it too specific 
so that it only decoded application/vnd.ms-sync.wbxml content.  It will now decode anything with a 
content type starting with application/vnd.ms-sync
 
1.1 Released.

5/16/2014
+ Autoselection of inspector when hitting enter or double-clicking a session
+ Updated error handling
+ Basic help tips system added
+ Auto-decoding of GZIP and chunked sessions

1.2 Released  5/16/2014

10/29/2014
+ Added "Smart" view, parsing some basic quoted-printable content and displaying the XML in an invalid, but easier to read format.
+ Added a toggle button to switch between Smart View and the original Raw View
+ Added more diagnostic information

11/1/2014
+ Added a way to reference the MSDN for an XML node. May need to refactor this completely as we flesh out the help system (future)
+ Parsing added for User-Agent strings
+ Parsing added for Base64 query strings:
	[MS-ASHTTP] 2.2.1.1.1.1 Base64-Encoded Query Value
	http://msdn.microsoft.com/en-us/library/ee160227.aspx

1.3 Released  12/23/2014

7/8/2015
	I'm adding prelminary schema EAS 16.0 fields.  Note that these are not for the final release of EAS 16. I'll update it further when EAS 16 reaches RTM.
	See the following for the preliminary EAS 16.0 specs:  
		https://msdn.microsoft.com/en-us/library/ee941641.aspx#exchange_server
			MS-ASWBXML covers the EAS Schema
	ASWBXML.cs - added new EAS schema fields (Premliminary EAS 16)

7/21/2015
	Release EASInspector 1.4
	Note that the addition for the EAS 16 fields are based-upon preliminary information and are for eductional purposes only.

